{"version":3,"sources":["../src/index.ts","../src/utils/loadImageURL.ts","../src/utils/loadImageFile.ts","../src/utils/isPassiveSupported.ts","../src/utils/isTouchDevice.ts","../src/utils/isFileAPISupported.ts"],"sourcesContent":["import React, {\r\n  type TouchEventHandler,\r\n  type CSSProperties,\r\n  type MouseEventHandler,\r\n} from 'react'\r\n\r\nimport { loadImageURL } from './utils/loadImageURL'\r\nimport { loadImageFile } from './utils/loadImageFile'\r\nimport { isPassiveSupported } from './utils/isPassiveSupported'\r\nimport { isTouchDevice } from './utils/isTouchDevice'\r\nimport { isFileAPISupported } from './utils/isFileAPISupported'\r\n\r\n// Draws a rounded rectangle on a 2D context.\r\nconst drawRoundedRect = (\r\n  context: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  borderRadius: number,\r\n) => {\r\n  if (borderRadius === 0) {\r\n    context.rect(x, y, width, height)\r\n  } else {\r\n    const widthMinusRad = width - borderRadius\r\n    const heightMinusRad = height - borderRadius\r\n    context.translate(x, y)\r\n    context.arc(\r\n      borderRadius,\r\n      borderRadius,\r\n      borderRadius,\r\n      Math.PI,\r\n      Math.PI * 1.5,\r\n    )\r\n    context.lineTo(widthMinusRad, 0)\r\n    context.arc(\r\n      widthMinusRad,\r\n      borderRadius,\r\n      borderRadius,\r\n      Math.PI * 1.5,\r\n      Math.PI * 2,\r\n    )\r\n    context.lineTo(width, heightMinusRad)\r\n    context.arc(\r\n      widthMinusRad,\r\n      heightMinusRad,\r\n      borderRadius,\r\n      Math.PI * 2,\r\n      Math.PI * 0.5,\r\n    )\r\n    context.lineTo(borderRadius, height)\r\n    context.arc(\r\n      borderRadius,\r\n      heightMinusRad,\r\n      borderRadius,\r\n      Math.PI * 0.5,\r\n      Math.PI,\r\n    )\r\n    context.translate(-x, -y)\r\n  }\r\n}\r\n\r\nfunction drawRoundedRectWithText(\r\n  context: CanvasRenderingContext2D,\r\n  width: number,\r\n  height: number,\r\n  text: string,\r\n  xPosition: number,\r\n  yPosition: number,\r\n  color: string\r\n): void {\r\n  const radius = 10; // You can adjust the radius as needed\r\n\r\n  // Draw the rounded rectangle\r\n  context.beginPath();\r\n  context.moveTo(xPosition + radius, yPosition);\r\n  context.lineTo(xPosition + width - radius, yPosition);\r\n  context.arcTo(xPosition + width, yPosition, xPosition + width, yPosition + radius, 0);\r\n  context.lineTo(xPosition + width, yPosition + height - radius);\r\n  context.arcTo(xPosition + width, yPosition + height, xPosition + width - radius, yPosition + height, radius);\r\n  context.lineTo(xPosition + radius, yPosition + height);\r\n  context.arcTo(xPosition, yPosition + height, xPosition, yPosition + height - radius, radius);\r\n  context.lineTo(xPosition, yPosition + radius);\r\n  context.arcTo(xPosition, yPosition, xPosition + radius, yPosition, 0);\r\n  context.closePath();\r\n\r\n  // Fill the rectangle with the specified color\r\n  context.fillStyle = color;\r\n  context.fill();\r\n\r\n  // Draw the text inside the rectangle\r\n  context.fillStyle = \"white\"; // Set text color\r\n  context.textAlign = \"center\";\r\n  context.textBaseline = \"middle\";\r\n  context.font = \"22px Arial\"; // Adjust font size and family as needed\r\n  context.fillText(text, xPosition + width / 2, yPosition + height / 2);\r\n}\r\n\r\nfunction drawRoundedRectWithRotatedTextVertically(\r\n  context: CanvasRenderingContext2D,\r\n  width: number,\r\n  height: number,\r\n  text: string,\r\n  xPosition: number,\r\n  yPosition: number,\r\n  color: string\r\n): void {\r\n  const radius = 10; // You can adjust the radius as needed\r\n\r\n  // Draw the rounded rectangle\r\n  context.beginPath();\r\n  context.moveTo(xPosition + radius, yPosition);\r\n  context.lineTo(xPosition + width - radius, yPosition);\r\n  context.arcTo(xPosition + width, yPosition, xPosition + width, yPosition + radius, radius);\r\n  context.lineTo(xPosition + width, yPosition + height - radius);\r\n  context.arcTo(xPosition + width, yPosition + height, xPosition + width - radius, yPosition + height, radius);\r\n  context.lineTo(xPosition + radius, yPosition + height);\r\n  context.arcTo(xPosition, yPosition + height, xPosition, yPosition + height - radius, 0);\r\n  context.lineTo(xPosition, yPosition + radius);\r\n  context.arcTo(xPosition, yPosition, xPosition + radius, yPosition, 0);\r\n  context.closePath();\r\n\r\n  // Fill the rectangle with the specified color\r\n  context.fillStyle = color;\r\n  context.fill();\r\n\r\n  // Save the current context state\r\n  context.save();\r\n\r\n  // Translate to the center of the rectangle\r\n  context.translate(xPosition + width / 2, yPosition + height / 2);\r\n\r\n  // Rotate the context 90 degrees (in radians)\r\n  context.rotate(Math.PI / 2);\r\n\r\n  // Draw the text inside the rectangle, rotated 90 degrees\r\n  context.fillStyle = \"white\"; // Set text color\r\n  context.textAlign = \"center\";\r\n  context.font = \"22px Arial\"; // Adjust font size and family as needed\r\n  context.fillText(text, 0, 0);\r\n  context.restore();\r\n\r\n  // Restore the previous context state\r\n}\r\n// Draws a \"Rule of Three\" grid on the canvas.\r\nconst drawGrid = (\r\n  context: CanvasRenderingContext2D,\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number,\r\n  gridColor: string,\r\n  onlyBox: boolean = false,\r\n  widthText: string = \"\",\r\n  heightText: string = \"\"\r\n) => {\r\n  context.fillStyle = gridColor\r\n  let lastGrid = 10\r\n  if (width > 1000) {\r\n    lastGrid = 10\r\n  } else if (width > 500) {\r\n    lastGrid = 5\r\n  } else if (width > 200) {\r\n    lastGrid = 3\r\n  } else {\r\n    lastGrid = 0\r\n  }\r\n  const thirdsX = width / lastGrid\r\n  const thirdsY = height / 3\r\n\r\n  // vertical bars\r\n  context.fillRect(x, y, 2, height)\r\n  if (!onlyBox) {\r\n    context.fillRect(thirdsX + x, y, 1, height)\r\n    for (let i = 0; i < lastGrid; i++) {\r\n      context.fillRect(thirdsX * i + x, y, 1, height)\r\n\r\n    }\r\n\r\n\r\n  }\r\n  context.fillRect(thirdsX * lastGrid + x, y, 2, height)\r\n\r\n\r\n  if (onlyBox) {\r\n    context.fillRect(x, y, width, 2)\r\n    context.fillRect(x, thirdsY * 3 + y, width, 2)\r\n    drawRoundedRectWithText(context, 180, 30, parseInt(widthText)+\" cm\", width*0.5, y, gridColor)\r\n\r\n    drawRoundedRectWithRotatedTextVertically(context, 30, 180, parseInt(heightText)+\" cm\", x, height*0.55, gridColor)\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nconst defaultEmptyImage = {\r\n  x: 0.5,\r\n  y: 0.5,\r\n}\r\n\r\ntype BorderType = [number, number] | number\r\n\r\ninterface ImageState {\r\n  x: number\r\n  y: number\r\n  width?: number\r\n  height?: number\r\n  resource?: HTMLImageElement\r\n}\r\n\r\nexport interface Props {\r\n  width: number\r\n  height: number\r\n  style?: CSSProperties\r\n  image?: string | File\r\n  border?: BorderType\r\n  position?: Position\r\n  scale?: number\r\n  rotate?: number\r\n  borderRadius?: number\r\n  crossOrigin?: '' | 'anonymous' | 'use-credentials'\r\n  onLoadFailure?: () => void\r\n  onLoadSuccess?: (image: ImageState) => void\r\n  onImageReady?: () => void\r\n  onImageChange?: () => void\r\n  onMouseUp?: () => void,\r\n  reflectImage?: () => void\r\n  onMouseMove?: (e: TouchEvent | MouseEvent) => void\r\n  onPositionChange?: (position: Position) => void\r\n  color?: [number, number, number, number?]\r\n  backgroundColor?: string\r\n  disableBoundaryChecks?: boolean\r\n  disableHiDPIScaling?: boolean\r\n  disableCanvasRotation?: boolean\r\n}\r\n\r\nexport interface Position {\r\n  x: number\r\n  y: number\r\n}\r\n\r\ninterface State {\r\n  drag: boolean\r\n  mx?: number\r\n  my?: number\r\n  image: ImageState\r\n}\r\n\r\n// @ts-ignore\r\ntype PropsWithDefaults = typeof AvatarEditor.defaultProps & Omit<Props, keyof typeof AvatarEditor.defaultProps>\r\n\r\nclass AvatarEditor extends React.Component<PropsWithDefaults, State> {\r\n  private canvas = React.createRef<HTMLCanvasElement>()\r\n  private pixelRatio =\r\n    typeof window !== 'undefined' && window.devicePixelRatio\r\n      ? window.devicePixelRatio\r\n      : 1\r\n\r\n  static defaultProps = {\r\n    scale: 1,\r\n    rotate: 0,\r\n    border: 25,\r\n    borderRadius: 0,\r\n    width: 200,\r\n    height: 200,\r\n    color: [0, 0, 0, 0.5],\r\n    showGrid: true,\r\n    gridColor: '#666',\r\n    reflectImage: false,\r\n    disableBoundaryChecks: false,\r\n    disableHiDPIScaling: false,\r\n    disableCanvasRotation: true,\r\n    widthText:\"\",\r\n    heightText:\"\",\r\n  }\r\n\r\n  state: State = {\r\n    drag: false,\r\n    my: undefined,\r\n    mx: undefined,\r\n    image: defaultEmptyImage,\r\n  }\r\n\r\n  componentDidMount() {\r\n    // scaling by the devicePixelRatio can impact performance on mobile as it creates a very large canvas.\r\n    // This is an override to increase performance.\r\n    if (this.props.disableHiDPIScaling) {\r\n      this.pixelRatio = 1\r\n    }\r\n    const context = this.getContext()\r\n\r\n    if (this.props.image) {\r\n      this.loadImage(this.props.image)\r\n    }\r\n    this.paint(context)\r\n\r\n    const options = isPassiveSupported() ? { passive: false } : false\r\n    document.addEventListener('mousemove', this.handleMouseMove, options)\r\n    document.addEventListener('mouseup', this.handleMouseUp, options)\r\n\r\n    if (isTouchDevice) {\r\n      document.addEventListener('touchmove', this.handleMouseMove, options)\r\n      document.addEventListener('touchend', this.handleMouseUp, options)\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsWithDefaults, prevState: State) {\r\n    if (\r\n      this.props.image &&\r\n      (this.props.image !== prevProps.image ||\r\n        this.props.width !== prevProps.width ||\r\n        this.props.height !== prevProps.height ||\r\n        this.props.backgroundColor !== prevProps.backgroundColor)\r\n    ) {\r\n      this.loadImage(this.props.image)\r\n    } else if (!this.props.image && prevState.image !== defaultEmptyImage) {\r\n      this.clearImage()\r\n    }\r\n\r\n    if (this.props.reflectImage !== prevProps.reflectImage) {\r\n      // If reflectImage is true, call the reflectImage method\r\n      this.reflectImage()\r\n    }\r\n\r\n    const context = this.getContext()\r\n    context.clearRect(0, 0, this.getCanvas().width, this.getCanvas().height)\r\n    this.paint(context)\r\n    this.paintImage(context, this.state.image, this.props.border)\r\n\r\n    if (\r\n      prevProps.image !== this.props.image ||\r\n      prevProps.width !== this.props.width ||\r\n      prevProps.height !== this.props.height ||\r\n      prevProps.position !== this.props.position ||\r\n      prevProps.scale !== this.props.scale ||\r\n      prevProps.rotate !== this.props.rotate ||\r\n      prevState.my !== this.state.my ||\r\n      prevState.mx !== this.state.mx ||\r\n      prevState.image.x !== this.state.image.x ||\r\n      prevState.image.y !== this.state.image.y\r\n    ) {\r\n      this.props.onImageChange?.()\r\n    }\r\n  }\r\n\r\n  private getCanvas(): HTMLCanvasElement {\r\n    if (!this.canvas.current) {\r\n      throw new Error(\r\n        'No canvas found, please report this to: https://github.com/mosch/react-avatar-editor/issues',\r\n      )\r\n    }\r\n\r\n    return this.canvas.current\r\n  }\r\n\r\n  reflecting = false\r\n  canvas2 = document.createElement('canvas')\r\n\r\n  reflectImage() {\r\n\r\n    this.reflecting = true\r\n    const image = this.state.image\r\n\r\n    if (!image.resource) {\r\n      throw new Error(\r\n        'No image resource available, please report this to')\r\n    }\r\n\r\n    const canvas2 = this.canvas2\r\n    canvas2.width = image.resource.width\r\n    canvas2.height = image.resource.height\r\n    const context2 = canvas2.getContext('2d')\r\n    if (!context2) {\r\n      throw new Error(\r\n        'No context found, please report this to')\r\n    }\r\n    context2.translate(image.resource.width, 0)\r\n    context2.scale(-1, 1)\r\n    context2.drawImage(image.resource, 0, 0)\r\n    const img = new Image()\r\n    img.src = canvas2.toDataURL()\r\n    img.onload = () => {\r\n      this.handleImageReady(img)\r\n    }\r\n\r\n  }\r\n\r\n  private getContext() {\r\n    const context = this.getCanvas().getContext('2d')\r\n    if (!context) {\r\n      throw new Error(\r\n        'No context found, please report this to: https://github.com/mosch/react-avatar-editor/issues',\r\n      )\r\n    }\r\n\r\n    return context\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('mousemove', this.handleMouseMove, false)\r\n    document.removeEventListener('mouseup', this.handleMouseUp, false)\r\n\r\n    if (isTouchDevice) {\r\n      document.removeEventListener('touchmove', this.handleMouseMove, false)\r\n      document.removeEventListener('touchend', this.handleMouseUp, false)\r\n    }\r\n  }\r\n\r\n  isVertical() {\r\n    return !this.props.disableCanvasRotation && this.props.rotate % 180 !== 0\r\n  }\r\n\r\n  getBorders(border = this.props.border) {\r\n    return Array.isArray(border) ? border : [border, border]\r\n  }\r\n\r\n  getDimensions() {\r\n    const { width, height, rotate, border } = this.props\r\n\r\n    const canvas = { width: 0, height: 0 }\r\n\r\n    const [borderX, borderY] = this.getBorders(border)\r\n\r\n    if (this.isVertical()) {\r\n      canvas.width = height\r\n      canvas.height = width\r\n    } else {\r\n      canvas.width = width\r\n      canvas.height = height\r\n    }\r\n\r\n    canvas.width += borderX * 2\r\n    canvas.height += borderY * 2\r\n\r\n    return {\r\n      canvas,\r\n      rotate,\r\n      width,\r\n      height,\r\n      border,\r\n    }\r\n  }\r\n\r\n  getBlob(){\r\n    const cropRect = this.getCroppingRect();\r\n    const image = this.state.image;\r\n\r\n    if (!image.resource) {\r\n      throw new Error('No image resource available');\r\n    }\r\n\r\n    // get actual pixel coordinates\r\n    cropRect.x *= image.resource.width;\r\n    cropRect.y *= image.resource.height;\r\n    cropRect.width *= image.resource.width;\r\n    cropRect.height *= image.resource.height;\r\n\r\n    // create a canvas with the correct dimensions\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = cropRect.width;\r\n    canvas.height = cropRect.height;\r\n\r\n    // draw the image on it\r\n    const context = canvas.getContext('2d');\r\n    if (!context) {\r\n      throw new Error('Unable to get canvas context');\r\n    }\r\n\r\n    context.drawImage(\r\n        image.resource,\r\n        cropRect.x,\r\n        cropRect.y,\r\n        cropRect.width,\r\n        cropRect.height,\r\n        0,\r\n        0,\r\n        cropRect.width,\r\n        cropRect.height\r\n    );\r\n\r\n    // Convert the canvas to a data URL\r\n    const dataUrl = canvas.toDataURL();\r\n    return dataUrl;\r\n  }\r\n  saveCropImage(name: string) {\r\n    // get relative coordinates (0 to 1)\r\n    const cropRect = this.getCroppingRect();\r\n    const image = this.state.image;\r\n\r\n    if (!image.resource) {\r\n      throw new Error('No image resource available');\r\n    }\r\n\r\n    // get actual pixel coordinates\r\n    cropRect.x *= image.resource.width;\r\n    cropRect.y *= image.resource.height;\r\n    cropRect.width *= image.resource.width;\r\n    cropRect.height *= image.resource.height;\r\n\r\n    // create a canvas with the correct dimensions\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = cropRect.width;\r\n    canvas.height = cropRect.height;\r\n\r\n    // draw the image on it\r\n    const context = canvas.getContext('2d');\r\n    if (!context) {\r\n      throw new Error('Unable to get canvas context');\r\n    }\r\n\r\n    context.drawImage(\r\n        image.resource,\r\n        cropRect.x,\r\n        cropRect.y,\r\n        cropRect.width,\r\n        cropRect.height,\r\n        0,\r\n        0,\r\n        cropRect.width,\r\n        cropRect.height\r\n    );\r\n\r\n    // Convert the canvas to a data URL\r\n    const dataUrl = canvas.toDataURL();\r\n\r\n    // Create a link element\r\n    const link = document.createElement('a');\r\n\r\n    // Set the href to the data URL\r\n    link.href = dataUrl;\r\n\r\n    // Set the download attribute to the provided name\r\n    link.download = name;\r\n\r\n    // Trigger a click event on the link to start the download\r\n    link.click();\r\n  }\r\n  getImage() {\r\n    // get relative coordinates (0 to 1)\r\n    const cropRect = this.getCroppingRect()\r\n    const image = this.state.image\r\n\r\n    if (!image.resource) {\r\n      throw new Error(\r\n        'No image resource available, please report this to: https://github.com/mosch/react-avatar-editor/issues',\r\n      )\r\n    }\r\n\r\n    // get actual pixel coordinates\r\n    cropRect.x *= image.resource.width\r\n    cropRect.y *= image.resource.height\r\n    cropRect.width *= image.resource.width\r\n    cropRect.height *= image.resource.height\r\n\r\n    // create a canvas with the correct dimensions\r\n    const canvas = document.createElement('canvas')\r\n\r\n    if (this.isVertical()) {\r\n      canvas.width = cropRect.height\r\n      canvas.height = cropRect.width\r\n    } else {\r\n      canvas.width = cropRect.width\r\n      canvas.height = cropRect.height\r\n    }\r\n\r\n    // draw the full-size image at the correct position,\r\n    // the image gets truncated to the size of the canvas.\r\n    const context = this.getContext()\r\n\r\n    context.translate(canvas.width / 2, canvas.height / 2)\r\n    context.rotate((this.props.rotate * Math.PI) / 180)\r\n    context.translate(-(canvas.width / 2), -(canvas.height / 2))\r\n\r\n    if (this.isVertical()) {\r\n      context.translate(\r\n        (canvas.width - canvas.height) / 2,\r\n        (canvas.height - canvas.width) / 2,\r\n      )\r\n    }\r\n\r\n    if (this.props.backgroundColor) {\r\n      context.fillStyle = this.props.backgroundColor\r\n      context.fillRect(0, 0, canvas.width, canvas.height)\r\n    }\r\n\r\n    context.drawImage(image.resource, -cropRect.x, -cropRect.y)\r\n\r\n    return canvas\r\n  }\r\n\r\n  /**\r\n   * Get the image scaled to original canvas size.\r\n   * This was default in 4.x and is now kept as a legacy method.\r\n   */\r\n  getImageScaledToCanvas() {\r\n    const { width, height } = this.getDimensions()\r\n\r\n    const canvas = document.createElement('canvas')\r\n\r\n    if (this.isVertical()) {\r\n      canvas.width = height\r\n      canvas.height = width\r\n    } else {\r\n      canvas.width = width\r\n      canvas.height = height\r\n    }\r\n\r\n    // don't paint a border here, as it is the resulting image\r\n    this.paintImage(canvas.getContext('2d')!, this.state.image, 0, 1)\r\n\r\n    return canvas\r\n  }\r\n\r\n  getXScale() {\r\n    if (!this.state.image.width || !this.state.image.height)\r\n      throw new Error('Image dimension is unknown.')\r\n\r\n    const canvasAspect = this.props.width / this.props.height\r\n    const imageAspect = this.state.image.width / this.state.image.height\r\n\r\n    return Math.min(1, canvasAspect / imageAspect)\r\n  }\r\n\r\n  getYScale() {\r\n    if (!this.state.image.width || !this.state.image.height)\r\n      throw new Error('Image dimension is unknown.')\r\n\r\n    const canvasAspect = this.props.height / this.props.width\r\n    const imageAspect = this.state.image.height / this.state.image.width\r\n\r\n    return Math.min(1, canvasAspect / imageAspect)\r\n  }\r\n\r\n  getCroppingRect() {\r\n    const position = this.props.position || {\r\n      x: this.state.image.x,\r\n      y: this.state.image.y,\r\n    }\r\n    const width = (1 / this.props.scale) * this.getXScale()\r\n    const height = (1 / this.props.scale) * this.getYScale()\r\n\r\n    const croppingRect = {\r\n      x: position.x - width / 2,\r\n      y: position.y - height / 2,\r\n      width,\r\n      height,\r\n    }\r\n\r\n    let xMin = 0\r\n    let xMax = 1 - croppingRect.width\r\n    let yMin = 0\r\n    let yMax = 1 - croppingRect.height\r\n\r\n    // If the cropping rect is larger than the image, then we need to change\r\n    // our maxima & minima for x & y to allow the image to appear anywhere up\r\n    // to the very edge of the cropping rect.\r\n    const isLargerThanImage =\r\n      this.props.disableBoundaryChecks || width > 1 || height > 1\r\n\r\n    if (isLargerThanImage) {\r\n      xMin = -croppingRect.width\r\n      xMax = 1\r\n      yMin = -croppingRect.height\r\n      yMax = 1\r\n    }\r\n\r\n    return {\r\n      ...croppingRect,\r\n      x: Math.max(xMin, Math.min(croppingRect.x, xMax)),\r\n      y: Math.max(yMin, Math.min(croppingRect.y, yMax)),\r\n    }\r\n  }\r\n\r\n  async loadImage(file: File | string) {\r\n    if (isFileAPISupported && file instanceof File) {\r\n      try {\r\n        const image = await loadImageFile(file)\r\n        this.handleImageReady(image)\r\n      } catch (error) {\r\n        this.props.onLoadFailure?.()\r\n      }\r\n    } else if (typeof file === 'string') {\r\n      try {\r\n        const image = await loadImageURL(file, this.props.crossOrigin)\r\n        this.handleImageReady(image)\r\n      } catch {\r\n        this.props.onLoadFailure?.()\r\n      }\r\n    }\r\n  }\r\n\r\n  handleImageReady = (image: HTMLImageElement) => {\r\n    const imageState: ImageState = {\r\n      ...this.getInitialSize(image.width, image.height),\r\n      resource: image,\r\n      x: 0.5,\r\n      y: 0.5,\r\n    }\r\n\r\n    this.setState({ drag: false, image: imageState }, this.props.onImageReady)\r\n    this.props.onLoadSuccess?.(imageState)\r\n  }\r\n\r\n  getInitialSize(width: number, height: number) {\r\n    let newHeight: number\r\n    let newWidth: number\r\n\r\n    const dimensions = this.getDimensions()\r\n    const canvasRatio = dimensions.height / dimensions.width\r\n    const imageRatio = height / width\r\n\r\n    if (canvasRatio > imageRatio) {\r\n      newHeight = dimensions.height\r\n      newWidth = width * (newHeight / height)\r\n    } else {\r\n      newWidth = dimensions.width\r\n      newHeight = height * (newWidth / width)\r\n    }\r\n\r\n    return {\r\n      height: newHeight,\r\n      width: newWidth,\r\n    }\r\n  }\r\n\r\n  clearImage = () => {\r\n    const canvas = this.getCanvas()\r\n    const context = this.getContext()\r\n\r\n    context.clearRect(0, 0, canvas.width, canvas.height)\r\n    this.setState({ image: defaultEmptyImage })\r\n  }\r\n\r\n  paintImage(\r\n    context: CanvasRenderingContext2D,\r\n    image: ImageState,\r\n    border: number,\r\n    scaleFactor = this.pixelRatio,\r\n  ) {\r\n    if (!image.resource) return\r\n\r\n    const position = this.calculatePosition(image, border)\r\n\r\n    context.save()\r\n\r\n    context.translate(context.canvas.width / 2, context.canvas.height / 2)\r\n    context.rotate((this.props.rotate * Math.PI) / 180)\r\n    context.translate(-(context.canvas.width / 2), -(context.canvas.height / 2))\r\n\r\n    if (this.isVertical()) {\r\n      context.translate(\r\n        (context.canvas.width - context.canvas.height) / 2,\r\n        (context.canvas.height - context.canvas.width) / 2,\r\n      )\r\n    }\r\n\r\n    context.scale(scaleFactor, scaleFactor)\r\n\r\n    context.globalCompositeOperation = 'destination-over'\r\n    context.drawImage(\r\n      image.resource,\r\n      position.x,\r\n      position.y,\r\n      position.width,\r\n      position.height,\r\n    )\r\n\r\n    if (this.props.backgroundColor) {\r\n      context.fillStyle = this.props.backgroundColor\r\n      context.fillRect(0, 0, context.canvas.width, context.canvas.height)\r\n    }\r\n\r\n    context.restore()\r\n  }\r\n\r\n  calculatePosition(image = this.state.image, border?: number) {\r\n    const [borderX, borderY] = this.getBorders(border)\r\n\r\n    if (!image.width || !image.height) {\r\n      throw new Error('Image dimension is unknown.')\r\n    }\r\n\r\n    const croppingRect = this.getCroppingRect()\r\n\r\n    const width = image.width * this.props.scale\r\n    const height = image.height * this.props.scale\r\n\r\n    let x = -croppingRect.x * width\r\n    let y = -croppingRect.y * height\r\n\r\n    if (this.isVertical()) {\r\n      x += borderY\r\n      y += borderX\r\n    } else {\r\n      x += borderX\r\n      y += borderY\r\n    }\r\n\r\n    return { x, y, height, width }\r\n  }\r\n\r\n  paint(context: CanvasRenderingContext2D) {\r\n    context.save()\r\n    context.scale(this.pixelRatio, this.pixelRatio)\r\n    context.translate(0, 0)\r\n    context.fillStyle = 'rgba(' + this.props.color.slice(0, 4).join(',') + ')'\r\n\r\n    let borderRadius = this.props.borderRadius\r\n    const dimensions = this.getDimensions()\r\n    const [borderSizeX, borderSizeY] = this.getBorders(dimensions.border)\r\n    const height = dimensions.canvas.height\r\n    const width = dimensions.canvas.width\r\n\r\n    // clamp border radius between zero (perfect rectangle) and half the size without borders (perfect circle or \"pill\")\r\n    borderRadius = Math.max(borderRadius, 0)\r\n    borderRadius = Math.min(\r\n      borderRadius,\r\n      width / 2 - borderSizeX,\r\n      height / 2 - borderSizeY,\r\n    )\r\n\r\n    context.beginPath()\r\n    // inner rect, possibly rounded\r\n    drawRoundedRect(\r\n      context,\r\n      borderSizeX,\r\n      borderSizeY,\r\n      width - borderSizeX * 2,\r\n      height - borderSizeY * 2,\r\n      borderRadius,\r\n    )\r\n    context.rect(width, 0, -width, height) // outer rect, drawn \"counterclockwise\"\r\n    context.fill('evenodd')\r\n\r\n    if (this.props.showGrid) {\r\n      drawGrid(\r\n        context,\r\n        borderSizeX,\r\n        borderSizeY,\r\n        width - borderSizeX * 2,\r\n        height - borderSizeY * 2,\r\n        this.props.gridColor,\r\n        false,\r\n        this.props.widthText,\r\n        this.props.heightText,\r\n      )\r\n      drawGrid(\r\n        context,\r\n        borderSizeX,\r\n        borderSizeY,\r\n        width - borderSizeX * 2,\r\n        height - borderSizeY * 2,\r\n        '#666',\r\n        true,\r\n        this.props.widthText,\r\n        this.props.heightText,\r\n      )\r\n    }\r\n    context.restore()\r\n  }\r\n\r\n  handleMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\r\n    // if e is a touch event, preventDefault keeps\r\n    // corresponding mouse events from also being fired\r\n    // later.\r\n    e.preventDefault()\r\n    this.setState({ drag: true, mx: undefined, my: undefined })\r\n  }\r\n\r\n  handleTouchStart: TouchEventHandler<HTMLCanvasElement> = (e) => {\r\n    // if e is a touch event, preventDefault keeps\r\n    // corresponding mouse events from also being fired\r\n    // later.\r\n    this.setState({ drag: true, mx: undefined, my: undefined })\r\n  }\r\n\r\n  handleMouseUp = () => {\r\n    if (this.state.drag) {\r\n      this.setState({ drag: false })\r\n      this.props.onMouseUp?.()\r\n    }\r\n  }\r\n\r\n  handleMouseMove = (e: MouseEvent | TouchEvent) => {\r\n    if (!this.state.drag) {\r\n      return\r\n    }\r\n\r\n    e.preventDefault() // stop scrolling on iOS Safari\r\n\r\n    const mousePositionX =\r\n      'targetTouches' in e ? e.targetTouches[0].pageX : e.clientX\r\n    const mousePositionY =\r\n      'targetTouches' in e ? e.targetTouches[0].pageY : e.clientY\r\n\r\n    this.setState({ mx: mousePositionX, my: mousePositionY })\r\n\r\n    let rotate = this.props.rotate\r\n\r\n    rotate %= 360\r\n    rotate = rotate < 0 ? rotate + 360 : rotate\r\n\r\n    if (\r\n      this.state.mx &&\r\n      this.state.my &&\r\n      this.state.image.width &&\r\n      this.state.image.height\r\n    ) {\r\n      const mx = this.state.mx - mousePositionX\r\n      const my = this.state.my - mousePositionY\r\n\r\n      const width = this.state.image.width * this.props.scale\r\n      const height = this.state.image.height * this.props.scale\r\n\r\n      let { x: lastX, y: lastY } = this.getCroppingRect()\r\n\r\n      lastX *= width\r\n      lastY *= height\r\n\r\n      // helpers to calculate vectors\r\n      const toRadians = (degree: number) => degree * (Math.PI / 180)\r\n      const cos = Math.cos(toRadians(rotate))\r\n      const sin = Math.sin(toRadians(rotate))\r\n\r\n      const x = lastX + mx * cos + my * sin\r\n      const y = lastY + -mx * sin + my * cos\r\n\r\n      const relativeWidth = (1 / this.props.scale) * this.getXScale()\r\n      const relativeHeight = (1 / this.props.scale) * this.getYScale()\r\n\r\n      const position = {\r\n        x: x / width + relativeWidth / 2,\r\n        y: y / height + relativeHeight / 2,\r\n      }\r\n\r\n      this.props.onPositionChange?.(position)\r\n\r\n      this.setState({ image: { ...this.state.image, ...position } })\r\n    }\r\n\r\n    this.props.onMouseMove?.(e)\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      scale,\r\n      rotate,\r\n      image,\r\n      border,\r\n      borderRadius,\r\n      width,\r\n      height,\r\n      position,\r\n      color,\r\n      backgroundColor,\r\n      style,\r\n      crossOrigin,\r\n      onLoadFailure,\r\n      onLoadSuccess,\r\n      onImageReady,\r\n      onImageChange,\r\n      onMouseUp,\r\n      onMouseMove,\r\n      onPositionChange,\r\n      disableBoundaryChecks,\r\n      disableHiDPIScaling,\r\n      disableCanvasRotation,\r\n      showGrid,\r\n      gridColor,\r\n      widthText,\r\n      heightText,\r\n\r\n\r\n      ...rest\r\n    } = this.props\r\n\r\n    const dimensions = this.getDimensions()\r\n\r\n    const defaultStyle: CSSProperties = {\r\n      width: dimensions.canvas.width,\r\n      height: dimensions.canvas.height,\r\n      cursor: this.state.drag ? 'grabbing' : 'grab',\r\n      touchAction: 'none',\r\n    }\r\n\r\n    const attributes: JSX.IntrinsicElements['canvas'] = {\r\n      width: dimensions.canvas.width * this.pixelRatio,\r\n      height: dimensions.canvas.height * this.pixelRatio,\r\n      onMouseDown: this.handleMouseDown,\r\n      onTouchStart: this.handleTouchStart,\r\n      style: { ...defaultStyle, ...style },\r\n    }\r\n\r\n    return React.createElement('canvas', {\r\n      ...attributes,\r\n      ...rest,\r\n      ref: this.canvas,\r\n    })\r\n  }\r\n}\r\n\r\nexport default AvatarEditor\r\n","const isDataURL = (str: string) => {\r\n  const regex =\r\n    /^\\s*data:([a-z]+\\/[a-z]+(;[a-z-]+=[a-z-]+)?)?(;base64)?,[a-z0-9!$&',()*+;=\\-._~:@/?%\\s]*\\s*$/i\r\n  return !!str.match(regex)\r\n}\r\n\r\nexport const loadImageURL = (imageURL: string, crossOrigin?: string) =>\r\n  new Promise<HTMLImageElement>((resolve, reject) => {\r\n    const image = new Image()\r\n    image.onload = () => resolve(image)\r\n    image.onerror = reject\r\n    if (!isDataURL(imageURL) && crossOrigin) {\r\n      image.crossOrigin = crossOrigin\r\n    }\r\n    image.src = imageURL\r\n  })\r\n","import { loadImageURL } from './loadImageURL'\r\n\r\nexport const loadImageFile = (file: File) =>\r\n  new Promise<HTMLImageElement>((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    reader.onload = (e) => {\r\n      try {\r\n        if (!e?.target?.result) {\r\n          throw new Error('No image data')\r\n        }\r\n        const image = loadImageURL(e.target.result as string)\r\n        resolve(image)\r\n      } catch (e) {\r\n        reject(e)\r\n      }\r\n    }\r\n    reader.readAsDataURL(file)\r\n  })\r\n","// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\r\nexport const isPassiveSupported = () => {\r\n  let passiveSupported = false\r\n  try {\r\n    const options = Object.defineProperty({}, 'passive', {\r\n      get: function () {\r\n        passiveSupported = true\r\n      },\r\n    })\r\n\r\n    const handler = () => {}\r\n    window.addEventListener('test', handler, options)\r\n    window.removeEventListener('test', handler, options)\r\n  } catch (err) {\r\n    passiveSupported = false\r\n  }\r\n  return passiveSupported\r\n}\r\n","export const isTouchDevice =\r\n  typeof window !== 'undefined' &&\r\n  typeof navigator !== 'undefined' &&\r\n  ('ontouchstart' in window || navigator.maxTouchPoints > 0)\r\n","export const isFileAPISupported = typeof File !== 'undefined'\r\n"],"mappings":"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","names":["e"]}